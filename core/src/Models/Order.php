<?php

declare(strict_types=1);

/**
 * Copyright (c) 2024 Vgrish <vgrish@gmail.com>
 * "vgrish/lost-orders-ms2" package for LostOrdersMS2
 * The version 1.0.0
 * @see https://github.com/vgrish/lost-orders-ms2
 */

namespace Vgrish\LostOrders\MS2\Models;

use Vgrish\LostOrders\MS2\App;
use Vgrish\LostOrders\MS2\Constant\CartItemField;
use Vgrish\LostOrders\MS2\Constant\OrderField;
use Vgrish\LostOrders\MS2\Tools\Utm;

class Order extends \xPDOObject
{
    public function save($cacheFlag = null)
    {
        $isNew = $this->isNew();

        if ($isNew) {
            if (empty(parent::get(OrderField::CREATED_AT))) {
                parent::set(OrderField::CREATED_AT, \time());
            }
        } else {
            parent::set(OrderField::UPDATED_AT, \time());
        }

        if (parent::isDirty(OrderField::VISITS) && parent::get(OrderField::VISITS)) {
            parent::set(OrderField::VISIT_AT, \time());
        }

        if (parent::isDirty(OrderField::SENDED) && parent::get(OrderField::SENDED)) {
            parent::set(OrderField::SENDED_AT, \time());
        }

        if (parent::isDirty(OrderField::GENERATED) && parent::get(OrderField::GENERATED)) {
            parent::set(OrderField::GENERATED_AT, \time());
        }

        if (parent::isDirty(OrderField::CART)) {
            $cart = parent::get(OrderField::CART);
            $cart_total_count = \array_reduce($cart, static fn ($r, $item) => $r + $item[CartItemField::COUNT], 0);
            $cart_total_cost = \array_reduce(
                $cart,
                static fn ($r, $item) => $r + ($item[CartItemField::PRICE] * $item[CartItemField::COUNT]),
                0,
            );

            parent::set(OrderField::CART_TOTAL_COUNT, $cart_total_count);
            parent::set(OrderField::CART_TOTAL_COST, $cart_total_cost);
        }

        return parent::save($cacheFlag);
    }

    public function set($k, $v = null, $vType = '')
    {
        if ($this->isLazy()) {
            $this->_loadFieldData($this->_lazy);
        }

        if ($k = $this->getField($k)) {
            if (\array_key_exists($k, $this->_fieldMeta)) {
                $phptype = $this->_fieldMeta[$k]['phptype'];

                // HACK for disabling Unicode escapes
                if ('json' === $phptype) {
                    if ($v && !\is_array($v)) {
                        $v = \json_decode($v, true);
                    }

                    $v = !empty($v) ? \json_encode($v, \JSON_UNESCAPED_UNICODE | \JSON_UNESCAPED_SLASHES) : null;
                    $old = parent::get($k);

                    if ($v !== $old) {
                        return parent::_setRaw($k, $v);
                    }

                    return true;
                }
            }
        }

        return parent::set($k, $v, $vType); // TODO: Change the autogenerated stub
    }

    public function setVisits(): self
    {
        $this->set(OrderField::VISITS, $this->get(OrderField::VISITS) + 1);

        return $this;
    }

    public function setFlagCompleted(): self
    {
        $this->set(OrderField::COMPLETED, true);

        return $this;
    }

    public function setFlagSended(): self
    {
        $this->set(OrderField::SENDED, true);

        return $this;
    }

    public function setFlagOrderGenerated($msorder_id = 0): self
    {
        $this->set(OrderField::GENERATED, true);
        $this->set(OrderField::MSORDER_ID, (int) $msorder_id);

        return $this;
    }

    public function getEmail(): string
    {
        $email = '';

        if ($profile = $this->getOne('UserProfile')) {
            $email = $profile->get('email');

            if (!\preg_match('/^\S+@\S+[.]\S+$/', $email)) {
                $email = '';
            }
        }

        return $email;
    }

    public function getPls(): array
    {
        if ($user = $this->getOne('User')) {
            $user = $user->toArray();
        }

        if ($profile = $this->getOne('UserProfile')) {
            $user = \array_merge($user ?? [], $profile->toArray());
        }

        $cart = parent::get(OrderField::CART);
        $modx = $this->xpdo;
        $modx->getService('miniShop2');

        $rows = [];
        $c = $modx->newQuery(\msProduct::class);
        $c->leftJoin(\msProductData::class, 'Data');
        $c->leftJoin(\msVendor::class, 'Vendor', 'Data.vendor = Vendor.id');
        $c->where([
            'id:IN' => \array_unique(\array_column($cart, CartItemField::ID)),
        ]);
        $c->select($modx->getSelectColumns(\msProduct::class, \msProduct::class, '', ['content'], true));
        $c->select($modx->getSelectColumns(\msProductData::class, 'Data', '', ['id'], true));
        $c->select($modx->getSelectColumns(\msVendor::class, 'Vendor', 'vendor.', ['id'], true));

        if ($c->prepare() && $c->stmt->execute()) {
            while ($tmp = $c->stmt->fetch(\PDO::FETCH_ASSOC)) {
                foreach ($tmp as $k => $v) {
                    if (!empty($v) && \is_string($v) && ('[' === $v[0] || '{' === $v[0])) {
                        $json = \json_decode($v, true);

                        if (\json_last_error() === \JSON_ERROR_NONE) {
                            $tmp[$k] = $json;
                        }
                    }
                }

                $rows[$tmp[CartItemField::ID]] = $tmp;
            }
        } else {
            $modx->log(\modX::LOG_LEVEL_ERROR, \print_r($c->toSql(), true));
            $modx->log(\modX::LOG_LEVEL_ERROR, \print_r($c->stmt->errorInfo(), true));
        }

        $products = [];
        $total = ['count' => 0, 'weight' => 0, 'cost' => 0, 'discount' => 0];

        foreach ($cart as $key => $entry) {
            if (!isset($rows[$entry['id']])) {
                continue;
            }

            $product = $rows[$entry['id']];

            $product['key'] = $key;
            $product['count'] = $entry['count'];
            $old_price = $product['old_price'];

            if ($product['price'] > $entry['price'] && empty($product['old_price'])) {
                $old_price = $product['price'];
            }

            $discount_price = 0 < $old_price ? $old_price - $entry['price'] : 0;

            $product['old_price'] = $old_price;
            $product['cost'] = $entry['count'] * $entry['price'];

            // Additional properties of product in cart
            if (!empty($entry['options']) && \is_array($entry['options'])) {
                $product['options'] = $entry['options'];

                foreach ($entry['options'] as $option => $value) {
                    $product['option.' . $option] = $value;
                }
            }

            // Add option values
            $options = $modx->call('msProductData', 'loadOptions', [$modx, $product['id']]);
            $products[] = \array_merge($product, $options);

            // Count total
            $total['count'] += $entry['count'];
            $total['cost'] += $entry['count'] * $entry['price'];
            $total['weight'] += $entry['count'] * $entry['weight'];
            $total['discount'] += $entry['count'] * $discount_price;
        }

        $total['positions'] = \count($products);

        $app = App::getInstance();

        $args = \array_merge(
            Utm::get(
                empty(parent::get(OrderField::SENDED)) ? 'initial' : 'repeated',
                parent::get(OrderField::UUID),
            ),
            [
                'action' => 'Order/Load',
                OrderField::UUID => parent::get(OrderField::UUID),
            ],
        );

        $args = \array_filter($args, static fn ($value, $key) => !empty($key) && !empty($value), \ARRAY_FILTER_USE_BOTH);
        $url = $app->getOption('action_url', null) . '?' . \http_build_query($args);

        return \array_merge(parent::toArray(), [
            'user' => $user,
            'total' => $total,
            'products' => $products,
            'order_url' => $url,
        ]);
    }
}
